### Using this Secret as an example
apiVersion: v1
kind: Secret
metadata:
  name: db-creds
type: kubernetes.io/basic-auth
stringData:
  username: ouruser
  password: our-password-12345
### When the above secret is created the data will be encoded the new secret will look different:
apiVersion: v1
kind: Secret
metadata:
  name: db-creds
type: kubernetes.io/basic-auth
data:
  username: b3VydXNlcg==
  password: b3VyLXBhc3N3b3JkLTEyMzQ1
---
### Using Secrets
### First through environment variables
containers:
- env:
  - name: SQL_USER
    valueFrom:
      secretKeyRef:
        key: username
        name: db-creds
  - name: SQL_PASSWORD
    valueFrom:
      secretKeyRef:
        key: password
        name: db-creds
        
### This will have secrets inside the container environment variables, which for most workloads is the most common method
# $ env | grep SQL
# SQL_USERNAME=ouruser
# SQL_PASSWORD=our-password-12345
---
### Now to mount it as a file inside the container IF the application is using a file to get credentials
containers:
  volumeMounts:
  - name: db-creds
    mountPath: /tmp/secrets
volumes:
- name: db-creds
  secret:
    secretName: db-creds
### The above puts (based on the Secret above) 2 files into the running container
# $ cat /tmp/secrets/password
# our-password-12345
# $ cat /tmp/secrets/username
# ouruser
### You could also only inject in the password secret like so:
---
containers:
  volumeMounts:
  - name: db-creds
    mountPath: /tmp/secrets
volumes:
- name: db-creds
  secret:
    secretName: db-creds
    items:
    - key: password
      path: password
### Checking the data
# $ cat /tmp/secrets/password
# our-password-12345
# $ ls /tmp/secrets/
# password
### Now no username file is present
### Please note that the Secret Keys (username, password) are the names of the files injected unless using the 
### items[].key.path example above
